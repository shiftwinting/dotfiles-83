snippet fn "fn" i
func $1($2)$3 {
	$0
}
endsnippet

snippet d "!=" i
!= $0
endsnippet

snippet fnm "fn - method"
func ($1) $2($3)$4 {
	$0
}
endsnippet

snippet pac "package"
package $0
endsnippet

snippet re "return"
return $0
endsnippet

snippet if "if"
if $1 {
	$0
}
endsnippet

snippet ife "if - else"
if $1 {
	$2
} else {
	$0
}
endsnippet

snippet switch "switch"
switch $1 {
	$0
}
endsnippet

snippet case "case"
case $1:$0
endsnippet

snippet c "const"
const $0
endsnippet

snippet ierr "if err"
if err != nil {
	$0
}
endsnippet

snippet for "for"
for $1 {
	$0
}
endsnippet

snippet ra "range"
range $0
endsnippet

snippet struct "struct"
type $1 struct {
	$0
}
endsnippet

snippet ; ":="
:= $0
endsnippet

snippet cl "quick fmt.Printf"
fmt.Printf("%v\n", $0)
endsnippet

snippet httphandler "http func"
func $1(w http.ResponseWriter, r *http.Request) {
	$0
}
endsnippet

snippet fatalf "fatalf"
log.Fatalf("$0: %v", err)
endsnippet

snippet lprintf "log.Printf"
log.Printf($0)
endsnippet

snippet decode "NewDecoder"
var body struct{}
if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
	log.Printf("error decoding: %v", err)
}
endsnippet

snippet encode "NewEncoder"
if err := json.NewEncoder(w).Encode($0); err != nil {
	log.Printf("error encoding: %v", err)
}
endsnippet

snippet unmarshal "unmarshal"
var labels []Label
if err := json.Unmarshal([]byte(rawLabels), &labels); err != nil {
	log.Printf("error unmarshalling value: %v", err.Error())
}
endsnippet

snippet hjson "header content-type application/json"
w.Header().Set("Content-Type", "application/json")
endsnippet

snippet dbconnection "db connection boilerplate"
connStr := "postgres://postgres:asdfasdf@localhost:5432/angelo?sslmode=disable"
db, err := sql.Open("postgres", connStr)

if err != nil {
	log.Fatalf("error connecting to database: %v", err)
}

if err := db.Ping(); err != nil {
	log.Fatalf("error pinging to database: %v", err)
}
endsnippet
